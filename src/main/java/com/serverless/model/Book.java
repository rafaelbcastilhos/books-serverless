package com.serverless.model;

import com.amazonaws.services.dynamodbv2.AmazonDynamoDB;
import com.amazonaws.services.dynamodbv2.datamodeling.*;
import com.amazonaws.services.dynamodbv2.model.AttributeValue;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;

/**
 * Tabela de definição de um livro.
 */
@DynamoDBTable(tableName = "PLACEHOLDER_BOOKS_TABLE_NAME")
public class Book {

    private static final String BOOKS_TABLE_NAME = System.getenv("BOOKS_TABLE_NAME");

    private static DynamoDBAdapter db_adapter;
    private final AmazonDynamoDB client;
    private final DynamoDBMapper mapper;

    private static final Logger logger = LogManager.getLogger(Book.class);

    private String id;
    private String name;
    private String author;

    @DynamoDBHashKey(attributeName = "id")
    @DynamoDBAutoGeneratedKey
    public String getId() {
        return this.id;
    }

    public void setId(String id) {
        this.id = id;
    }

    @DynamoDBRangeKey(attributeName = "name")
    public String getName() {
        return this.name;
    }

    public void setName(String name) {
        this.name = name;
    }

    @DynamoDBAttribute(attributeName = "author")
    public String getAuthor() {
        return author;
    }

    public void setAuthor(String author) {
        this.author = author;
    }

    public Book() {
        DynamoDBMapperConfig mapperConfig = DynamoDBMapperConfig.builder()
                .withTableNameOverride(new DynamoDBMapperConfig.TableNameOverride(BOOKS_TABLE_NAME))
                .build();
        db_adapter = DynamoDBAdapter.getInstance();
        this.client = db_adapter.getDbClient();
        this.mapper = db_adapter.createDbMapper(mapperConfig);
    }

    public Book(AmazonDynamoDB client) {
        db_adapter = DynamoDBAdapter.getInstance();
        this.client = client;
        this.mapper = new DynamoDBMapper(client);
    }

    public String toString() {
        return String.format("Book [id=%s, name=%s, author=%s]", this.id, this.name, this.author);
    }

    public Boolean ifTableExists() {
        return this.client.describeTable(BOOKS_TABLE_NAME).getTable().getTableStatus().equals("ACTIVE");
    }

    /**
     * Lista os livros
     *
     * @return Objetos previamente cadastrados
     * @throws IOException Lança exceção
     */
    public List<Book> list() throws IOException {
        DynamoDBScanExpression scanExp = new DynamoDBScanExpression();
        List<Book> results = this.mapper.scan(Book.class, scanExp);
        for (Book b : results) {
            logger.info("Books - list(): " + b.toString());
        }
        return results;
    }

    /**
     * Captura um determinado livro de acordo com o id
     *
     * @param id do Livro a ser capturado
     * @return Determinado livro
     * @throws IOException Lança exceção
     */
    public Book get(String id) throws IOException {
        Book book = null;

        HashMap<String, AttributeValue> av = new HashMap<String, AttributeValue>();
        av.put(":v1", new AttributeValue().withS(id));

        DynamoDBQueryExpression<Book> queryExp = new DynamoDBQueryExpression<Book>()
                .withKeyConditionExpression("id = :v1")
                .withExpressionAttributeValues(av);

        PaginatedQueryList<Book> result = this.mapper.query(Book.class, queryExp);
        if (result.size() > 0) {
            book = result.get(0);
            logger.info("Books - get(): book - " + book.toString());
        } else {
            logger.info("Books - get(): book - Not Found.");
        }
        return book;
    }

    /**
     * Salva um livro na Base de dados
     *
     * @param book Objeto livro a ser salvo
     * @throws IOException Lança exceção
     */
    public void save(Book book) throws IOException {
        logger.info("Books - save(): " + book.toString());
        this.mapper.save(book);
    }

    /**
     * Deleta um livro da Base de dados
     *
     * @param id Do livro a ser deletado
     * @return Boolean se conseguiu ou não deletar
     * @throws IOException Lança exceção
     */
    public Boolean delete(String id) throws IOException {
        Book book = null;

        book = get(id);
        if (book != null) {
            logger.info("Books - delete(): " + book.toString());
            this.mapper.delete(book);
        } else {
            logger.info("Books - delete(): book - does not exist.");
            return false;
        }
        return true;
    }
}
